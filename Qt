import sys
from PyQt6 import uic, QtWidgets
from PyQt6.QtGui import QIcon
from PyQt6.QtWidgets import QMessageBox, QLineEdit
import pymysql
import Menu


class MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.banco = pymysql.connect(
            host="localhost",
            user="root",
            passwd="",
            database="bd_teste2"
        )

        # Defina os ícones
        self.icon_eye_open = QIcon("Icones/visibility.png")
        self.icon_eye_closed = QIcon("Icones/visibility_off.png")

        # Carrega a interface
        self.stackedWidget.setCurrentIndex(0)
        self.lineEdit_passwrd.setEchoMode(QLineEdit.EchoMode.Password)
        self.lineEdit_passwrd_2.setEchoMode(QLineEdit.EchoMode.Password)
        self.lineEdit_passwrd_3.setEchoMode(QLineEdit.EchoMode.Password)

        # Conectar funções aos botões
        self.bttn_alterindex_2.clicked.connect(self.alter_reg)
        self.bttn_register.clicked.connect(self.new_reg)
        self.bttn_alterindex.clicked.connect(self.alter_log)
        self.bttn_passwrdview.clicked.connect(self.password_view)
        self.bttn_passwrdview_2.clicked.connect(self.password_view)
        self.bttn_login.clicked.connect(self.login)

        # Definir ícones para os botões de senha
        self.bttn_passwrdview.setIcon(self.icon_eye_closed)
        self.bttn_passwrdview_2.setIcon(self.icon_eye_closed)

        # Verifica permissão ao iniciar
        self.verificar_permissao()

    def verificar_permissao(self):
        cursor = self.banco.cursor()
        comando_SQL = "SELECT COUNT(Permissao) FROM usuarios WHERE Permissao = 'Administrador'"
        cursor.execute(comando_SQL)
        resultado = cursor.fetchone()

        if resultado and resultado[0] > 0:
            self.bttn_alterindex_2.hide()

    def alter_reg(self):
        self.stackedWidget.setCurrentIndex(1)

    def alter_log(self):
        self.stackedWidget.setCurrentIndex(0)

    def password_view(self):
        if self.lineEdit_passwrd.echoMode() == QLineEdit.EchoMode.Password:
            self.lineEdit_passwrd.setEchoMode(QLineEdit.EchoMode.Normal)
            self.lineEdit_passwrd_2.setEchoMode(QLineEdit.EchoMode.Normal)
            self.lineEdit_passwrd_3.setEchoMode(QLineEdit.EchoMode.Normal)
            self.bttn_passwrdview.setIcon(self.icon_eye_open)
            self.bttn_passwrdview_2.setIcon(self.icon_eye_open)
        else:
            self.lineEdit_passwrd.setEchoMode(QLineEdit.EchoMode.Password)
            self.lineEdit_passwrd_2.setEchoMode(QLineEdit.EchoMode.Password)
            self.lineEdit_passwrd_3.setEchoMode(QLineEdit.EchoMode.Password)
            self.bttn_passwrdview.setIcon(self.icon_eye_closed)
            self.bttn_passwrdview_2.setIcon(self.icon_eye_closed)

    def login(self):
        user = self.lineEdit_user_2.text()
        passwrd = self.lineEdit_passwrd_3.text()

        cursor = self.banco.cursor()
        comando_SQL = "SELECT Senha FROM usuarios WHERE Usuario = %s"
        cursor.execute(comando_SQL, (user,))
        resultado = cursor.fetchone()

        if resultado:
            senha_bd = resultado[0]
            if passwrd == senha_bd:
                QMessageBox.information(self, "Sucesso", "Login realizado com sucesso!")
                self.close()
                self.menu = Menu.MainMenu()  # Aqui você chama o menu
                self.menu.show()
            else:
                QMessageBox.warning(self, "Erro", "Senha incorreta!")
        else:
            QMessageBox.warning(self, "Erro", "Usuário não encontrado!")

    def new_reg(self):
        name = self.lineEdit_name.text()
        user = self.lineEdit_user.text()
        email = self.lineEdit_email.text()
        permissao = self.comboBox.currentText()
        passwrd = self.lineEdit_passwrd.text()
        passwrd_conf = self.lineEdit_passwrd_2.text()

        if not name or not user or not email or not passwrd or not passwrd_conf:
            QMessageBox.warning(self, "Erro", "Todos os campos devem ser preenchidos!")
            return

        cursor = self.banco.cursor()
        comando_SQL = "SELECT usuario FROM usuarios WHERE usuario = %s"
        cursor.execute(comando_SQL, (user,))
        resultado = cursor.fetchone()

        if resultado:
            QMessageBox.warning(self, "Erro", "Usuário já existente!")
            return

        comando_SQL = "SELECT email FROM usuarios WHERE email = %s"
        cursor.execute(comando_SQL, (email,))
        resultado = cursor.fetchone()

        if resultado:
            QMessageBox.warning(self, "Erro", "E-mail já existente!")
            return

        if passwrd != passwrd_conf:
            QMessageBox.warning(self, "Erro", "As senhas não coincidem!")
            return

        comando_SQL = "INSERT INTO usuarios (nome, usuario, permissao, email, senha) VALUES (%s, %s, %s, %s, %s)"
        dados = (name, user, permissao, email, passwrd)
        cursor.execute(comando_SQL, dados)
        self.banco.commit()

        QMessageBox.information(self, "Sucesso", "Cadastro realizado com sucesso!")

        self.stackedWidget.setCurrentIndex(0)

        # Limpa os campos após o cadastro
        self.lineEdit_name.setText("")
        self.lineEdit_user.setText("")
        self.lineEdit_email.setText("")
        self.lineEdit_passwrd.setText("")
        self.lineEdit_passwrd_2.setText("")


# Cria a aplicação
app = QtWidgets.QApplication(sys.argv)
login_register = MainWindow()
login_register.setWindowTitle("HostInn")
login_register.show()
sys.exit(app.exec())
